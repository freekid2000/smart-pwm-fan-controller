---

###############################################################################
# Smart PWM Fan Controller v1.0 ESPHome configuration
###############################################################################
#
#    Copyright (C) 2025 Joshua M. Boniface <joshua@boniface.me>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
###############################################################################

esphome:
  name: fan-controller
  name_add_mac_suffix: true
  friendly_name: "Fan Controller"
  project:
    name: joshuaboniface.fan-controller
    version: "1.0"
  on_boot:
    priority: 200
    then:
      - script.execute:
          id: set_fan_speed
          value: !lambda 'return id(fan_speed_value);'

dashboard_import:
  package_import_url: github://joshuaboniface/smart-pwm-fan-controller/fan-controller.yaml@master

esp32:
  board: esp32dev

preferences:
  flash_write_interval: 15sec

logger:
  level: VERBOSE
  baud_rate: 115200

api:
  reboot_timeout: 15min

ota:
  platform: esphome

web_server:
  port: 80

captive_portal:

mdns:
  disabled: false

wifi:
  ap: {}
  domain: ""
  output_power: 8.5dB
  reboot_timeout: 15min
  power_save_mode: none

globals:
  - id: fan_speed_value
    type: float
    restore_value: true
    initial_value: '100.0'

script:
  - id: set_fan_speed
    mode: single
    then:
      - lambda: |-
          id(fan_pwm_output).set_level(id(fan_speed_value) / 100.0);

number:
  - platform: template
    name: "Fan Speed"
    id: fan_speed
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    set_action:
      then:
        - lambda: |-
            ESP_LOGD("fan_speed", "Setting fan speed to %.1f%%", x);
            id(fan_speed_value) = x;
            id(fan_pwm_output).set_level(x / 100.0);
    lambda: |-
      return id(fan_speed_value);

switch:
  - platform: gpio
    id: fan_power
    icon: mdi:fan
    name: "Fan Power"
    pin: GPIO13

output:
  - platform: ledc
    id: fan_pwm_output
    pin: GPIO27

button:
  - platform: restart
    name: "ESP32 Restart"
    icon: mdi:power-cycle
    entity_category: diagnostic

sensor:
  - platform: template
    name: "Active Fans"
    icon: mdi:numeric
    accuracy_decimals: 0
    lambda: |-
      const std::vector<sensor::Sensor*> sensors = {
        id(fan1_rpm),
        id(fan2_rpm),
        id(fan3_rpm),
        id(fan4_rpm),
        id(fan5_rpm),
        id(fan6_rpm),
        id(fan7_rpm),
        id(fan8_rpm)
      };

      int count = 0;

      for (auto *s : sensors) {
        if (!isnan(s->state) && s->state > 0) {
          count++;
        }
      }

      return count;
    update_interval: 5s

  - platform: template
    name: "Average RPM"
    icon: mdi:pulse
    unit_of_measurement: 'RPM'
    accuracy_decimals: 2
    lambda: |-
      const std::vector<sensor::Sensor*> sensors = {
        id(fan1_rpm),
        id(fan2_rpm),
        id(fan3_rpm),
        id(fan4_rpm),
        id(fan5_rpm),
        id(fan6_rpm),
        id(fan7_rpm),
        id(fan8_rpm)
      };

      float total = 0.00;
      int count = 0;

      for (auto *s : sensors) {
        if (!isnan(s->state) && s->state > 0) {
          total += s->state;
          count++;
        }
      }

      return count > 0 ? total / count : 0.00;
    update_interval: 5s

  - platform: pulse_counter
    name: "Fan 1 RPM"
    id: "fan1_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 32
      inverted: false
      mode: INPUT_PULLUP        # Pull-up is required for fan tach readings
    count_mode:
      rising_edge: INCREMENT    # Count only the rising edge of each tick
      falling_edge: DISABLE     # Falling edges might result in lingering values
    use_pcnt: true              # Use the hardware pulse counter explicitly
    update_interval: 5s
    filters:
      - multiply: 0.5           # Most fans provide 2 pulses per rotation

  - platform: pulse_counter
    name: "Fan 2 RPM"
    id: "fan2_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 33
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 3 RPM"
    id: "fan3_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 25
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 4 RPM"
    id: "fan4_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 26
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 5 RPM"
    id: "fan5_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 19
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 6 RPM"
    id: "fan6_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 18
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 7 RPM"
    id: "fan7_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 17
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: pulse_counter
    name: "Fan 8 RPM"
    id: "fan8_rpm"
    unit_of_measurement: 'RPM'
    pin:
      number: 16
      inverted: false
      mode: INPUT_PULLUP
    count_mode:
      rising_edge: INCREMENT
      falling_edge: DISABLE
    use_pcnt: true
    update_interval: 5s
    filters:
      - multiply: 0.5
